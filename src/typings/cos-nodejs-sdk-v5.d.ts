/** Declaration file generated by dts-gen */
/* eslint-disable */

declare module 'cos-nodejs-sdk-v5' {
    export default class COS {
        constructor(options: { SecretId: string; SecretKey: string });

        abortUploadTask(params: any, callback: any): any;

        deleteBucket(params: any, callback: any): any;

        deleteBucketCORS(...args: any[]): void;

        deleteBucketCors(params: any, callback: any): any;

        deleteBucketLifecycle(params: any, callback: any): any;

        deleteBucketPolicy(params: any, callback: any): any;

        deleteBucketReplication(params: any, callback: any): any;

        deleteBucketTagging(params: any, callback: any): any;

        deleteBucketWebsite(params: any, callback: any): any;

        deleteMultipleObject(
            params: {
                Bucket: string;
                Region: string;
                Objects: { Key: string }[];
            },
            callback?: any,
        ): any;

        deleteObject(params: any, callback?: any): any;

        getAuth(params: any, callback: any): any;

        getBucket(params: any, callback: any): any;

        getBucketACL(...args: any[]): void;

        getBucketAcl(params: any, callback: any): any;

        getBucketCORS(...args: any[]): void;

        getBucketCors(params: any, callback: any): any;

        getBucketLifecycle(params: any, callback: any): any;

        getBucketLocation(params: any, callback: any): any;

        getBucketPolicy(params: any, callback: any): any;

        getBucketReferer(params: any, callback: any): any;

        getBucketReplication(params: any, callback: any): any;

        getBucketTagging(params: any, callback: any): any;

        getBucketVersioning(params: any, callback: any): any;

        getBucketWebsite(params: any, callback: any): any;

        getObject(params: any, callback: any): any;

        getObjectACL(...args: any[]): void;

        getObjectAcl(params: any, callback: any): any;

        getObjectUrl(params: any, callback: any): any;

        getService(params: any, callback: any): any;

        getV4Auth(params: any, callback: any): any;

        headBucket(params: any, callback: any): any;

        headObject(params: any, callback: any): any;

        listObjectVersions(params: any, callback: any): any;

        multipartAbort(params: any, callback: any): any;

        multipartComplete(params: any, callback: any): any;

        multipartInit(params: any, callback: any): any;

        multipartList(params: any, callback: any): any;

        multipartListPart(params: any, callback: any): any;

        multipartUpload(params: any, callback: any): any;

        optionsObject(params: any, callback: any): any;

        putBucket(params: any, callback: any): any;

        putBucketACL(...args: any[]): void;

        putBucketAcl(params: any, callback: any): any;

        putBucketCORS(...args: any[]): void;

        putBucketCors(params: any, callback: any): any;

        putBucketLifecycle(params: any, callback: any): any;

        putBucketPolicy(params: any, callback: any): any;

        putBucketReferer(params: any, callback: any): any;

        putBucketReplication(params: any, callback: any): any;

        putBucketTagging(params: any, callback: any): any;

        putBucketVersioning(params: any, callback: any): any;

        putBucketWebsite(params: any, callback: any): any;

        putObject(params: any, callback?: any): any;

        putObjectACL(...args: any[]): void;

        putObjectAcl(params: any, callback: any): any;

        putObjectCopy(params: any, callback: any): any;

        restoreObject(params: any, callback: any): any;

        sliceCopyFile(params: any, callback: any): any;

        sliceUploadFile(params: any, callback: any): any;

        uploadFiles(params: any, callback: any): any;

        uploadPartCopy(params: any, callback: any): any;

        static getAuthorization(opt: any): any;

        static version: string;
    }
}
